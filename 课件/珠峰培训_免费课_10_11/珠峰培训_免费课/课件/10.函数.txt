function:函数数据类型，相当于一个方法或者一个功能
函数别名：方法，如果被当作事件处理函数，又称作句柄

1.定义一个函数(计划一段代码，定义一个模板)
    1.在内存堆中开辟一个内存空间
    2.把函数体js代码当作字符串存在内存中间内（如果函数只定义，没执行的话，没有任何意义）
    3.堆栈中的函数名对应地址，地址引用
    4.当一个函数执行时候，执行环境被推入内存中，这个过程叫做压栈。



2.执行函数（执行计划）
    1.在堆栈中开辟一片空间，这个空间叫做执行环境
    2.把存储空间的js代码字符串当作代码运行


3.function 作用：
    1.防止代码重复
    2.将代码进行封装，代码没有必要重新编写，只需要执行以下函数即可。
    3.隐藏变量，创建私有变量
    4.创建类

4.参数：求1+1的和（形参：可以理解成一个变量）（多态：一个功能的多重形态，通过参数实现不同的功能）

   function sum(){
        var total=1+1;
        console.log(total);
   }

   sum();

   1.形参的作用：实现一个功能，发现部分原材料没有，置顶计划时候没有办法获取，需要从外部获取。
   这时候我们需要把原材料定义在形参上，在执行计划的时候，只提供原材料就好了。

   2.定义一个形参，没有传递值，默认值：undefined，传递参数检测，没有重载

   function sum(num1,num2){
        if(typeof num1==="undefined"){
            total+=num1;
        }
        if(typeof num2==="undefined"){
            total+=num2;
        }
        console.log(total);
   }

   3.arguments:函数内置接受参数机制,类数组（数字作为索引，索引从0开始，代表第几个传递的参数）
   //内置：天生存在的，不管你传递参数没有，都会有这个对象的存在
    console.dir(arguments);
    [0],length,callee:代表当前函数本身

   4.函数执行时候，会在内部实现一个私有地盘，只有在这个地盘内的代码可以访问私有变量，外部代码不可以访问私有变量。
   函数执行时候会形成一个私有作用域保护里面的变量不受外界干扰，我们把这个机制叫做闭包。

   arguments修改会修改形参内容，同理形参修改也会修改arguments。只有一种情况例外，
   arguments的长度不是可变的，所以修改形参不会增加arguments.

5.外部如何访问total?return

    在外部想访问什么值，函数内部return这个值就可以了.外面可以访问这个结果或者对结果再进
    行加工。
    这个时候函数终止执行，控制函数函数体代码执行到什么位置结束。
    如果我们没有写return，或者写return;，默认返回值undefined
    实名函数、匿名函数、函数表达式和立即执行函数
    ~,!,+,-与()都可以定义立即执行函数

    终止外部函数执行

6.事件句柄

7.eval

