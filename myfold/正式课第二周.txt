    //1、正则仅仅就是用来处理字符串的:
    // 匹配 ->验证当前的字符串是否符合我们的规则(每一个正则都是一个规则) ->test
    // 捕获 ->在整个字符串中,把符合规则的字符都依次的获取到 ->exec、match、replace

    //2、正则组成
    //元字符:
    //[特殊意义]
    // \d -> 匹配一个0-9的数字,相当于[0-9],和它相反的是\D ->匹配一个除了0-9的任意字符
    // \w -> 匹配一个0-9、a-z、A-Z、_的数字或字符,相当于[0-9a-zA-Z_]
    // \s -> 匹配一个空白字符(空格、制表符...)
    // \b -> 匹配一个单词的边界
    // \t -> 匹配一个制表符
    // \n -> 匹配一个换行
    // . -> 匹配一个除了\n以外的任意字符
    // ^ -> 以某一个元字符开头
    // $ -> 以某一个元字符结尾
    // \ -> 转移字符
    // x|y -> x或者y的一个
    // [xyz] -> x、y、z中的任意一个
    // [^xyz] -> 除了xyz中的任意一个字符
    // [a-z] -> 匹配a-z中的任意一个字符
    // [^a-z] -> 匹配除了a-z中的任意一个字符
    // () -> 正则中的分组

    //[量词]
    // * -> 0到多个
    // + -> 1到多个
    // ? -> 0到1个
    // {n} -> 出现n次
    // {n,} -> 出现n到多次
    // {n,m} -> 出现n到m次

    //[普通]
    // 任何字符在正则中除了以上有特殊意义的,其他的都是代表本身意思的普通元字符

    //修饰符:
    //i -> ignoreCase 忽略字母的大小写
    //m -> multiline 多行匹配
    //g -> global 全局匹配


    //3、?在正则中的意思比较多
    //1)放在一个非量词元字符后面代表出现0-1次
    //  例如：/^\d?$/ 出现零到一次的一个0-9之间的数字
    //2)放在一个量词元字符后面,取消捕获时候的贪婪性
    //  例如：/^\d+?$/ 捕获的时候只把第一个捕获的数字获取 "2015" -> 2
    //3)(?:)分组只匹配不捕获
    //4)(?=)正向预查
    //5)(?!)负向预查

    //4、()的作用
    //1)改变默认的优先级
    //2)可以进行分组捕获
    //3)分组引用