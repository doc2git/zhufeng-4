10.24-25

1、获取元素的背景颜色值
    元素.style.属性 通过这种方式获取，只能获取行内样式上的值(不管你在样式表中是否写了,只要行内上不写都获取不到)想获取到必 须写在行内样式上
    思考：如果我就想获取样式表中设置的样式值，我们可以使用window.getComputedStyle(IE下用currentStyle)来处理
    style:CSSStyleDeclaration(行内样式信息的详细描述) 属性值是一个新的对象数据类型，里面包含了我们元素的样式(行内样式)，并且存储的只能是行内的样式，行内上没有的话，这里面的属性值也是空，所以我们通过 oDiv.style.backgroundColor获取的才是空
    document.body  获取的是整个body
    document.documentElement 获取的是整个HTML

    document是上下文context，限定了我们获取的范围；
    1)一个页面中理论上我们的ID是不能重复的，所以我们的getElementById这个方法的上下文只能是document
    2)如果我们不小心写重复了，那么获取的只是第一个
    3)在IE6和IE7下，会把表单元素的name属性值也看做ID-->我们在编写页面的时候一定要防止表单元素name和id的冲突
    var oDiv = document.getElementById("div1");
    var oDiv = document.body.getElementById("div1");//Uncaught TypeError: document.body.getElementById is not a function 说明getElementById不是一个方法 --->这种情况一般都是上下文不符合
    4)一般我们有些时候，不需要获取元素，直接在js中用元素的ID来代表这个元素也可以;但是这样的话，如果页面中存在多个id相同的，我们获取的是多个元素; -->强烈不推荐大家这样来用
    console.log(div1);

2、js数据类型转换
    1)将其他的数据类型转换为布尔类型？
    只有0、NaN、空字符串、null、undefined代表false
    ![] --> false
    !!"" --> false
    if([]){alert("true");} --> 判断条件的真和假 []转换为布尔类型是真，条件成立  -->"true"  alert是把所有要输出的内容先转换为字符串然后在输出，例如：alert(12)-->"12"  alert([])-->""
    if(oDiv){} -->首先把oDiv这个变量存储的值转换为布尔类型判断真假，真条件成立...
    if("12px"+10){alert(true);}else{alert(false);} --> "12px"+10 --> "12px10" --> true --> "true"
    if("12px"-10){alert(true);}else{alert(false);} --> "12px"-10 --> NaN --> false --> "false"


    2)将其他的数据类型转换为数字?-->Number
    true-->1 false-->0
    ""-->0  "12"-->12  "12px"-->NaN
    []--> []先转换为字符串""(toString),然后在把""转换为数字0(Number) -->0


    3)value1==value2 如果两个值的数据类型不一样，首先转换为一样的值，然后在进行比较 -->在比较的时候，不一样数据类型之间的转换规则?
    1)对象==对象  永远不相等(是不同的内存地址) 例如:[]==[] -->false
    2)对象==字符串  把对象转换为字符串(toString) 例如:[]=="" -->true
    3)对象==布尔  都转化为数字(对象->字符串->数字 布尔true->false->0) 例如:
        []==false  []->0 false->0  -->true
        ![]==false  首先利用！把空数组转换为布尔类型在取反->false  false==false -->true
    4)对象==数字 对象转换为数字  例如:[]==0 -->true  []==1 -->false
    5)字符串==布尔 都转换为数字  例如:""==true-->false  ""==false-->true
    6)字符串==数字 字符串转换为数字  例如:"12"==12-->true
    7)布尔==数字 布尔转化为数字  例如:true==1-->true  true==2-->false
    8)null==undefined -->true  null===undefined-->false
    null/undefined和其他的任何数据类型都不相等
    9)NaN和谁都不相等(和自己也不相等) NaN==NaN-->false


3、 截取文字并且显示...
      text-overflow: ellipsis; /*截取超出的部分用省略号代替*/
      white-space: nowrap; /*强制不换行*/
      overflow: hidden; /*溢出隐藏*/

4、DOM节点
            nodeType      nodeName        nodeValue
    元素节点    1           标签名大写         null
    文本节点    3            #text           文本值
    注释节点    8            #comment        注释内容
    document   9           #document        null

    获取元素所有子节点：childNodes
    获取元素所有的元素子节点：children
    获取哥哥节点：previousSibling
    获取弟弟节点：nextSibling
    获取哥哥元素节点：previousElementSibling(IE6-8不兼容)
    获取弟弟元素节点：nextElementSibling(IE6-8不兼容)

5、DOM节点增删改

    1)createElement 动态创建一个元素标签
        var oDiv1 = document.createElement("div");
        oDiv1.id = "div1";
        oDiv1.className = "box";
        oDiv1.innerHTML = "我是动态创建的第一DIV";

    2)appendChild 添加到指定容器的最末尾位置
        document.body.appendChild(oDiv1);

    3)insertBefore 把新元素(newEle)添加到指定旧元素(oldEle)的前面
        // oldEle.parentNode.insertBefore(newEle,oldEle)
        var oDiv2 = document.createElement("div");
        oDiv2.id = "div2";
        oDiv2.className = "box";
        oDiv2.innerHTML = "我是动态创建的第二DIV";
        oDiv2.style.backgroundColor = "red";
        //oDiv1.parentNode.insertBefore(oDiv2, oDiv1);
        document.body.insertBefore(oDiv2, oDiv1);
        //如果我们知道容器的话，就没有必要通过parentNode获取了

    4)removeChild 删除某一个元素
        document.body.removeChild(oDiv1);

    5)cloneNode(true/false) 克隆一个元素 true-->把当前元素和它的子子孙孙都克隆  false-->之克隆自己本身，子子孙孙不克隆
        var oDiv3 = oDiv2.cloneNode(false);
        oDiv3.id = "div3";
        oDiv3.style.backgroundColor = "yellow";
        //document.body.appendChild(oDiv3);

    6)replaceChild 用newEle把oldEle替换掉
        //oldEle.parentNode.replaceChild(newEle,oldEle)
        oDiv2.parentNode.replaceChild(oDiv3, oDiv2);


    7)自定义属性:在某一个操作的时候需要自己的一些值，但是我为了防止现有的环境不影响这个值，我们在之前把需要的值保存在自己的自定义属性上，现在用到的话在拿出来用即可
        oDiv3.index = 100;//存储了，但是没有在HTML的结构上显示 -->我们这样操作的原理是:把oDiv3看做一个对象数据类型的值，然后在其对应的内存空间中增加了一个index的属性名,属性值是100
        console.log(oDiv3.index);
        oDiv3.index = null;
        delete oDiv3.index;

        setAttribute:设置元素的自定义属性
        如果是这样设置的只能使用同系列的方法获取
        oDiv3.setAttribute("index", 100);//可以在HTML结构上显示
        //console.log(oDiv3.index);//-->undefined
        console.log(oDiv3.getAttribute("index"));
        oDiv3.removeAttribute("index");

        兼容问题:在IE6~8下不兼容下面设置class值
        oDiv3.setAttribute("class", "box");

6、Math
        1、Math.abs() 获取绝对值 (正数->正数 负数->正数)
        console.log(Math.abs(-12.5)); //-->12.5

        2、Math.ceil() 向上取整
        console.log(Math.ceil(12.1)); //-->13

        3、Math.floor() 向下取整
        console.log(Math.floor(12.9)); //-->12

        4、Math.round() 四舍五入
        console.log(Math.round(12.5)); //-->13

        5、Math.max/Math.min 获取一堆数中的最大值和最小值
        console.log(Math.max(12, 23, 13, 24, 34, 14, 25, 36)); //-->36

        6、Math.random() 获取[0-1)之间的随机小数
            for (var i = 0; i < 1000; i++) {
                console.log(Math.random());
            }

        获取[n-m]之间的随机整数:
        Math.round(Math.random()*(m-n)+n)

7、String

       一个汉字也是一个索引，代表的是一个字符
    1)charAt(index):按照索引获取指定位置的字符
      charCodeAt:按照索引获取指定位置的字符对应的Unicode编码值(ASCII)

    2)substr(n,m):从索引n开始截取m个字符
      substring(n,m):从索引n开始找到索引m处(不包含m)，把找到的截取
      slice(n,m):和substring用法一样 -->slice可以支持以负数作为索引(长度+索引)，而substring不支持
      以上三个如果只出现一个n，都是截取到末尾

    3)split(字符):把字符串按照指定的字符进行拆分，拆分出来的每一项都是数组的每一项-->和数组中的join对应

    4)indexOf:获取字符在字符串中第一次出现位置的索引
      lastIndexOf:获取字符在字符串中最后一次出现位置的索引
      如果没有找到这个字符，返回的值是-1，而我们也可以通过这个来判断字符串中是否包含这个字符
      是不存在兼容问题的,数组中的这个两个方法在IE6~8下不兼容

    5)replace(old,new):把老字符替换成新字符，在不使用正则的情况下，我们每一次执行replace只能替换一个
      replace支持用正则进行匹配替换，还支持高级的替换法则(正式课第二周周日我们详细的来讲)

    6)match:需要和正则结合到一起来用，捕获正则匹配的内容

    7)toUpperCase:字符串中所有的字母变大写
      toLowerCase:字符串中所有的字母变小写

8、Date

    var time = new Date();
    var year = time.getFullYear();
    var month = time.getMonth() + 1;//0-11代表1-12月
    var day = time.getDate();
    var week = time.getDay();//0-6代表周日-周六
    var hour = time.getHours();
    var minute = time.getMinutes();
    var second = time.getSeconds();
    var mSecond = time.getMilliseconds();

    把字符串转换为时间格式的数据:new Date(str);

    getTime:获取当前时间距离1970-01-01 00:00:00之间的毫秒差
    getYear:获取的当天是今天的第多少天

9、setTimeout/setInterval

    window.setTimeout([function],[interval]);
    window.setInterval([function],[interval]);
    区别：
    setTimeout到达时间执行方法，方法执行完成定时器就停止了(定时器还在)
    setInterval到达时间执行方法，方法执行完成，以后每隔这么长时间都会在重新的执行一次，只有手动清除后才停止

    setTimeout定时器是有返回值的，是一个数字，代表当前是第几个定时器
    setInterval设置一次只是一个定时器，执行多次用的都是同一个，所以返回值是不变的

    window.clearInterval() / window.clearTimeout() 清除定时器  timer=null

10、
